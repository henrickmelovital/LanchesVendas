1º: Apresentando o conceito de Session:
	1.1º: HTTP - protocolo sem estado;
	1.2º: ASP .NET CORE - Session - Microsoft.AspNetCore.Session;
	1.3º: Com base em um dicionário ou tabela hash no servidor, o estado da sessão persiste os dados através das requisições de um navegador;
	1.4º: O ASP .NET CORE mantém o estado da sessão, dando ao cliente um cookie que contém o ID da sessão, que é envidado ao servidor com cada solicitação;
	1.5º: O servidor mantém uma sessão por tempo limitado após a última requisição;
	1.6º: Você pode definir o tempo limite da sessão ou usar o valor padrão que é 20 minutos;
	1.7º: O estado da sessão é ideal para armazenar dados do usuário especificos de uma determinada sessão;
	1.8º: Dados são excluidos do cache: Sessão expira ou Session.Clear();

2º Configurando Sessão (Classe Stratup deve contar):
	2.1º: Qualquer um dos caches de memória IDistributedCache;
	2.2º: Uma chamada a AddSession em ConfigureServices();
	2.3º: A chamada UseSession em Configure();

3º: Inserindo dados dentro da Session:
	3.1º: const string SessionKeyNome = "_Nome";
	3.2º: const string SessionKeyIdade = "_Idade";
	3.3º: HttpContext.Session.SetString(SessionKeyNome, "Henrick");
	3.4º: HttpContext.Session.SetInt32(SessionKeyIdade, 21);
	3.5º: var nome = context.Session.GetString(SessionKeyNome);
	3.6º: var nome = context.Session.GetString(SessionKeyIdade);

Configurando a Session e o uso de HttpContext:

3º: Para habilitar a middleware da Sessão temos que definir na classe Startup:
	3.1º: Ativar o uso do cache em memória através da interface IMemoryCache() usando o método AddMemoryCache(), no método AddMemoryCache(); no método ConfigureServices;
	3.2º: Invocar o método AddSession() no método ConfigureServices;
	3.3º: Invocar o UserSession() no método Configure;

4º Para acessar os recursos do HttpContext em um serviço:
	4.1º: Registrar a interface IHttpContextAcessor() para injeção de dependência no método ConfigureServices();