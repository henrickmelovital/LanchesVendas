Modelo de Domínio:

1º: Classes que representam a sua lógica de negócio;

2º:Vender Lanches:
	2.1º: Lanche: Nome, Preco, Descricao curta, Descricao longa, Imagem, Imagem miniatura, Categoria, se é um lanche preferido, se o lanhce está disponível
	2.2º: Categoria: Nome e Descricao;

3º: Modelo de Domínio - Usar uma Ferramenta ORM:
	3.1º: Ferramenta ORM - Mapeia as classes para as tabelas do banco de dados;

4º: Entity Framework Core Abordagem Code-First:
	4.1º: Gerar o banco de dados e as tabelas a partir das classes;
	4.2º: Primeiro eu crio as classes do modelo de dompinio, e depois, usando o EF Core eu crio o banco de dados e as tabelas com base nas classes;

5º: Entity Framework Core - Code-First (Vantagens):
	5.1º: Permite definir as propriedades e relacionadas usando códig C#;
	5.2º: Permite abstrair comandos SQL e objetos ADO.NET;
	5.3º: Permite gerenciar o versionamento do banco de dados usando Migrations;
	5.4º: Auxiliar na produtivodade reduzindo o tempo de desenvolvimento;

6º: Convenções usadas pelo EFCORE
	6.1º: A propriedade Id ou <nome_entidade>Id vai gerar uma chave primária na tabela;
	6.2º: As propriedades definidas na classe irão gerar colunas com o mesmo nome na tabela;
	6.3º: O tipo de dados das colunas geradas a partir dos tipos definidos nas propriedades depende do provedor de banco de dados usados;
		6.3.1: C#			SQL Server
			 int			int
			 string		nvarchar(Max)
			 decimal		decimal(18, 2)
			 bool		bit 
			 datetime	datetime
	6.4º: A definição do relacionamento entre as entidades é definido em uma propriedade de navegação;

4º Criar os atributos dentro da classe 'Models':
	4.1º: Relacionamento Um-para-muitos:
		4.1.1º: Classe um com uma lista da classe muitos
		4.1.2º: Id da outra cetegoria e um virtual do mesmo método;
